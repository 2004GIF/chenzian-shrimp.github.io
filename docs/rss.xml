<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>陈子安个人博客</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io</link><description>每日分享</description><copyright>陈子安个人博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io</link></image><lastBuildDate>Sun, 30 Jun 2024 08:51:33 +0000</lastBuildDate><managingEditor>陈子安个人博客</managingEditor><ttl>60</ttl><webMaster>陈子安个人博客</webMaster><item><title>消息队列--Rabbbit </title><link>https://2004GIF.github.io/chenzian-shrimp.github.io/post/xiao-xi-dui-lie---Rabbbit%20.html</link><description># MQ&#13;
MQ（Message Queue）是一种消息队列技术，它允许应用程序通过队列来异步交换消息。</description><guid isPermaLink="true">https://2004GIF.github.io/chenzian-shrimp.github.io/post/xiao-xi-dui-lie---Rabbbit%20.html</guid><pubDate>Sun, 30 Jun 2024 08:51:10 +0000</pubDate></item><item><title>服务保护和分布式事务</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io/post/fu-wu-bao-hu-he-fen-bu-shi-shi-wu.html</link><description># 服务保护&#13;
实现步骤：&#13;
1. 找出需要进行远程调用的业务&#13;
&#13;
2. 在这个微服务添加 sentinel 的坐标和在配置文件中配上 sentinel的控制地址&#13;
&#13;
   ````xml&#13;
    &lt;!-- sentinel 服务保护 --&gt;&#13;
    &lt;dependency&gt;&#13;
        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#13;
        &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;&#13;
    &lt;/dependency&gt;&#13;
   ````&#13;
&#13;
   ```yaml&#13;
   spring:&#13;
     cloud:&#13;
       sentinel: # 连接 sentinel 控制台&#13;
         transport:&#13;
           dashboard: 127.0.0.1:8090 # sentinel 控制台地址&#13;
         http-method-specify: true   # 将http的请求方法作为sentinel的资源名称的一部分 （  ）&#13;
   # 设置 feign 在底层使用 okhttp 并且使用 okhttp 的连接池&#13;
   feign:&#13;
     okhttp:&#13;
       enabled: true&#13;
     sentinel:&#13;
       enabled: true&#13;
   ```&#13;
&#13;
3.  给 client 接口添加  FallBack   &#13;
&#13;
   1. 创建类实现 FallbackFactory&lt;CartClient&gt;&#13;
&#13;
      ```java&#13;
      @Slf4j&#13;
      public class CartClientFallBack implements FallbackFactory&lt;CartClient&gt; {&#13;
          @Override&#13;
          public CartClient create(Throwable cause) {&#13;
              return ids -&gt; {&#13;
                  log.error('批量删除购物车数据 --- 远程调用失败，原因：{}', cause.getMessage());&#13;
                  throw new RuntimeException(StrUtil.format('批量删除购物车数据 ：{}', cause.getMessage()));&#13;
              };&#13;
          }&#13;
      }&#13;
      ```&#13;
&#13;
   2. 添加到 IOC 容器中&#13;
&#13;
      ```java&#13;
         @Bean&#13;
          public CartClientFallBack cartClientFallBack() {&#13;
              return new CartClientFallBack();&#13;
          }&#13;
      ```&#13;
&#13;
   3. 在 client 添加 FallBack &#13;
&#13;
      ```java&#13;
      @FeignClient(value = 'cart-service' , fallbackFactory = CartClientFallBack.class)&#13;
      public interface CartClient {&#13;
          /**&#13;
           * 批量删除购物车数据&#13;
           * @param ids&#13;
           */&#13;
          @DeleteMapping('/carts')&#13;
          void deleteCartItemByIds(@RequestParam('ids') Collection&lt;Long&gt; ids);&#13;
      }&#13;
      ```&#13;
&#13;
4. 在控制台中添加保护规则  （sentinel ）&#13;
&#13;
&#13;
&#13;
# 实现分布式事务&#13;
实现步骤：&#13;
&#13;
1. 给每一个加入业务的微服务添加 seata 依赖和对应的seata配置 （  在nacos 中可以直接在 bootstrap 文件引入）&#13;
2. 【如果 seata 选择的模式是 AT ，就需要给每一个参加业务的微服务添加一个 undo_log （快照表用于恢复数据）】&#13;
3. 给业务入口加上 @GlobalTransactional 注解&#13;
4. 给其他被调用的业务加上 @Transactional 注解（明确该业务可能会滚回）。</description><guid isPermaLink="true">https://2004GIF.github.io/chenzian-shrimp.github.io/post/fu-wu-bao-hu-he-fen-bu-shi-shi-wu.html</guid><pubDate>Sat, 29 Jun 2024 14:28:08 +0000</pubDate></item><item><title>分布式事务框架—— setata</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io/post/fen-bu-shi-shi-wu-kuang-jia-%E2%80%94%E2%80%94%20setata.html</link><description># 分布式事务框架—— setata&#13;
  业务场景： &#13;
&#13;
![image-20240629182546354](https://github.com/2004GIF/chenzian-shrimp.github.io/assets/126451952/8790679a-6ba1-45c3-882c-fd84121a1f40)&#13;
代码实现：&#13;
&#13;
````java&#13;
   @Override&#13;
    @GlobalTransactional // 开启全局事务管理器&#13;
    public Long createOrder(OrderFormDTO orderFormDTO) {&#13;
        // 1.订单数据&#13;
        Order order = new Order();&#13;
        // 1.1.查询商品&#13;
        List&lt;OrderDetailDTO&gt; detailDTOS = orderFormDTO.getDetails();&#13;
        // 1.2.获取商品id和数量的Map&#13;
        Map&lt;Long, Integer&gt; itemNumMap = detailDTOS.stream()&#13;
                .collect(Collectors.toMap(OrderDetailDTO::getItemId, OrderDetailDTO::getNum));&#13;
        Set&lt;Long&gt; itemIds = itemNumMap.keySet();&#13;
        // 1.3.查询商品&#13;
        List&lt;ItemDTO&gt; items = itemClient.queryItemsByIds(itemIds);&#13;
&#13;
        if (items == null || items.size() &lt; itemIds.size()) {&#13;
            throw new BadRequestException('商品不存在');&#13;
        }&#13;
        // 1.4.基于商品价格、购买数量计算商品总价：totalFee&#13;
        int total = 0;&#13;
        for (ItemDTO item : items) {&#13;
            total += item.getPrice() * itemNumMap.get(item.getId());&#13;
        }&#13;
        order.setTotalFee(total);&#13;
        // 1.5.其它属性&#13;
        order.setPaymentType(orderFormDTO.getPaymentType());&#13;
        order.setUserId(UserContext.getUser()); //   登录用户id&#13;
        order.setStatus(1);&#13;
        // 1.6.将Order写入数据库order表中&#13;
        save(order);&#13;
&#13;
        // 2.保存订单详情&#13;
        List&lt;OrderDetail&gt; details = buildDetails(order.getId(), items, itemNumMap);&#13;
        detailService.saveBatch(details);&#13;
&#13;
        // 3.清理购物车商品&#13;
        cartClient.deleteCartItemByIds(itemIds);&#13;
&#13;
        // 4.扣减库存&#13;
        try {&#13;
            itemClient.deductStock(detailDTOS);&#13;
        } catch (Exception e) {&#13;
            throw new RuntimeException('库存不足！');&#13;
        }&#13;
        return order.getId();&#13;
    }&#13;
````&#13;
&#13;
出现问题：清空购物车的业务完成，SQL 语句执行完成已经提交了，到了扣减商品库存的业务出错了，应该整个创建订单的业务都失败了，失败就应该回滚恢复原来的数据，但是清空购物车的业务的SQL语句已经提交不可能回滚了。</description><guid isPermaLink="true">https://2004GIF.github.io/chenzian-shrimp.github.io/post/fen-bu-shi-shi-wu-kuang-jia-%E2%80%94%E2%80%94%20setata.html</guid><pubDate>Sat, 29 Jun 2024 10:51:17 +0000</pubDate></item><item><title>微服务保护 —— Sentinel</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io/post/wei-fu-wu-bao-hu-%20%E2%80%94%E2%80%94%20Sentinel.html</link><description># 微服务保护 —— Sentinel&#13;
## 限流（微服务提供者）&#13;
作用：控制访问微服务的 QPS 数量&#13;
实现方式直接在 sentinel 控制台中给对应的簇点添加流控规则设置 QPS 即可&#13;
&#13;
## 线程隔离（Thread Isolation）&#13;
   - **定义**：线程隔离在Sentinel中通常是通过并发线程数控制实现的。</description><guid isPermaLink="true">https://2004GIF.github.io/chenzian-shrimp.github.io/post/wei-fu-wu-bao-hu-%20%E2%80%94%E2%80%94%20Sentinel.html</guid><pubDate>Sat, 29 Jun 2024 02:51:30 +0000</pubDate></item><item><title>网关-动态路由</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io/post/wang-guan---dong-tai-lu-you.html</link><description># 网关-动态路由&#13;
实现思路：&#13;
1. 监听nacos配置文件&#13;
2. 更新网关的路由表&#13;
&#13;
&#13;
实现：&#13;
1. 导入坐标&#13;
```xml&#13;
   &lt;!-- nacos --&gt;&#13;
        &lt;dependency&gt;&#13;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&#13;
        &lt;/dependency&gt;&#13;
&#13;
        &lt;!-- 读取 nacos 中定义的配置 --&gt;&#13;
        &lt;dependency&gt;&#13;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&#13;
        &lt;/dependency&gt;&#13;
&#13;
        &lt;!--&#13;
         使用 bootstrap 配置文件&#13;
         主要用于应用程序的引导阶段配置，在项目启动时先加载 bootstrap配置文件，再加载 application 配置文件&#13;
         --&gt;&#13;
        &lt;dependency&gt;&#13;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;&#13;
        &lt;/dependency&gt;&#13;
&#13;
```&#13;
2. 创建bootstrap文件配置 nacos 等配置信息&#13;
```yaml&#13;
spring:&#13;
  application: # 服务名称&#13;
    name: gateway&#13;
  profiles:&#13;
    active: dev&#13;
  cloud:&#13;
    # nacos 配置&#13;
    nacos:&#13;
      server-addr: 192.168.42.135:8848&#13;
&#13;
```&#13;
3. 写实现代码&#13;
````java&#13;
package com.hmall.gateway.router;&#13;
&#13;
import cn.hutool.json.JSONUtil;&#13;
import com.alibaba.cloud.nacos.NacosConfigManager;&#13;
import com.alibaba.nacos.api.config.listener.Listener;&#13;
import com.alibaba.nacos.api.exception.NacosException;&#13;
import com.hmall.common.utils.CollUtils;&#13;
import lombok.RequiredArgsConstructor;&#13;
import lombok.extern.slf4j.Slf4j;&#13;
import org.springframework.cloud.gateway.route.RouteDefinition;&#13;
import org.springframework.cloud.gateway.route.RouteDefinitionWriter;&#13;
import org.springframework.stereotype.Component;&#13;
import reactor.core.publisher.Mono;&#13;
&#13;
import javax.annotation.PostConstruct;&#13;
import java.util.HashSet;&#13;
import java.util.List;&#13;
import java.util.Set;&#13;
import java.util.concurrent.Executor;&#13;
&#13;
@Component&#13;
@RequiredArgsConstructor&#13;
@Slf4j&#13;
public class DynamicRouterConfig {&#13;
    // nacos 配置管理器 ， 在底层这个类已经注册成了 Bean , 而这类的 getConfigService方法就可以获取 ConfigService  ，nacos 的连接对象&#13;
    private final NacosConfigManager nacosConfigManager;&#13;
&#13;
    //  操作路由表的对象 ，新增或者删除路由 &#13;
    private final RouteDefinitionWriter routeDefinitionWriter;&#13;
   // nacos 中配置文件的名字&#13;
    private final String dataId = 'gateway-router.json';&#13;
  // 组名&#13;
    private final String group = 'DEFAULT_GROUP';&#13;
  // 保存每一次更新后的路由 id &#13;
    private final Set&lt;String&gt; routerIds = new HashSet&lt;&gt;();&#13;
&#13;
    @PostConstruct // 在构造方法执行之后立刻执行&#13;
    public void initRouter() throws NacosException {&#13;
        // 第一次获取的到的路由配置信息&#13;
        String configInfo = nacosConfigManager.getConfigService()&#13;
       // 先拉取一次配置，后再监听配置 参数： 配置文件名、组别、超时时间 、监听器&#13;
       .getConfigAndSignListener(&#13;
                dataId, group, 5000,&#13;
                new Listener() {&#13;
                    /**&#13;
                     * 利用线程池技术来进行下面的 receiveConfigInfo 方法&#13;
                     * @return&#13;
                     */&#13;
                    @Override&#13;
                    public Executor getExecutor() {&#13;
                        return null;&#13;
                    }&#13;
&#13;
                    /**&#13;
                     * 监听到路由变化执行的函数&#13;
                     * @param configInfo 配置信息&#13;
                     */&#13;
                    @Override&#13;
                    public void receiveConfigInfo(String configInfo) {&#13;
                        // 动态加载路由&#13;
                        updateRouter(configInfo);&#13;
                    }&#13;
                });&#13;
        //  先更新一次路由表，后面通过监听器来更新路由表&#13;
        updateRouter(configInfo);&#13;
&#13;
    }&#13;
&#13;
    /**&#13;
     * 更新路由表&#13;
     *&#13;
     * @param configInfo ， 路由的配置信息&#13;
     */&#13;
    public void updateRouter(String configInfo) {&#13;
        log.info('路由配置信息： {}', configInfo);&#13;
        // 获取到的 configInfo 是一个 json 格式的数组对象，对象的属性是 id、route、predicates、filters ，&#13;
        // 正好 RouteDefinition 类就是这么定义的，所以可以直接转换成 RouteDefinition 对象&#13;
        // 1. 将路由信息转换为 RouteDefinition 对象集合&#13;
        List&lt;RouteDefinition&gt; routeDefinitionList = JSONUtil.toList(configInfo, RouteDefinition.class);&#13;
&#13;
        // 2. 在更新路由表之前应该将旧的路由表的所有路由删除掉&#13;
        for (String routerId : routerIds) {&#13;
            routeDefinitionWriter.delete(Mono.just(routerId)).subscribe();&#13;
        }&#13;
        // 2.1 清空已经删除的路由id ，防止去删除上一次更新的路由&#13;
        routerIds.clear();&#13;
&#13;
        // 3. 将路由信息更新到 Gateway&#13;
        if (CollUtils.isEmpty(routeDefinitionList)) return;&#13;
&#13;
        for (RouteDefinition routeDefinition : routeDefinitionList) {&#13;
            // 更新路由表，并且订阅&#13;
            routeDefinitionWriter.save(Mono.just(routeDefinition)).subscribe();&#13;
            // 记录更新的路由 id ，以便下一次更新路由是将旧的路由删除&#13;
            routerIds.add(routeDefinition.getId());&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
&#13;
````&#13;
。</description><guid isPermaLink="true">https://2004GIF.github.io/chenzian-shrimp.github.io/post/wang-guan---dong-tai-lu-you.html</guid><pubDate>Fri, 28 Jun 2024 11:37:14 +0000</pubDate></item><item><title>微服务-网关实现登录校验</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io/post/wei-fu-wu---wang-guan-shi-xian-deng-lu-xiao-yan.html</link><description># 微服务-网关&#13;
## 利用微服务网关实现登录认证&#13;
流程图&#13;
![wfw](https://github.com/2004GIF/chenzian-shrimp.github.io/assets/126451952/0df00b44-a517-4859-a8e9-844f302068c4)&#13;
&#13;
1. 自定义GlobalFilter&#13;
````java&#13;
/**&#13;
 * 认证过滤器&#13;
 */&#13;
@Component&#13;
@RequiredArgsConstructor&#13;
public class AuthGlobalFilter implements GlobalFilter, Ordered {&#13;
&#13;
    private final AuthProperties authProperties;&#13;
&#13;
    private final JwtTool jwtTool;&#13;
    /**&#13;
     * 利用 spring 提供的路径匹配器来校验请求是否需要拦截&#13;
     */&#13;
    private final AntPathMatcher antPathMatcher = new AntPathMatcher();&#13;
&#13;
    @Override&#13;
    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {&#13;
        // 1. 获取请求对象&#13;
        ServerHttpRequest request = exchange.getRequest();&#13;
        // 2. 判断请求的路径是否需要拦截&#13;
        if (isExclude(request.getPath().toString())) {&#13;
            // 不需要拦截放行&#13;
            return chain.filter(exchange);&#13;
        }&#13;
        // 3. 获取token ，进行校验&#13;
        HttpHeaders headers = request.getHeaders();&#13;
        List&lt;String&gt; values = headers.get(HttpHeaders.AUTHORIZATION);&#13;
        String token = null;&#13;
        // 3.1 token 不为空，获取 token&#13;
        if (values != null &amp;&amp; CollUtil.isNotEmpty(values)) {&#13;
            token = values.get(0);&#13;
        }&#13;
        Long userId = null;&#13;
        // 3.2 校验 token&#13;
        try {&#13;
            userId = jwtTool.parseToken(token);&#13;
        } catch (Exception e) {&#13;
            e.printStackTrace();&#13;
            // token 校验失败拦截&#13;
            ServerHttpResponse response = exchange.getResponse();&#13;
            response.setStatusCode(HttpStatus.UNAUTHORIZED);&#13;
           // response.setComplete() 将请求拦截&#13;
            return response.setComplete();&#13;
        }&#13;
&#13;
        //  4. 向下游传递用户数据 (  利用请求头来向下传递用户信息 )&#13;
        Long finalUserId = userId;&#13;
        // 4. 改变网关中传递下去的上下文对象  mutate 突变&#13;
        ServerWebExchange swc = exchange.mutate()&#13;
                .request(builder -&gt;&#13;
                        builder.header(CommonConstant.HEADER_USER_INFO, String.valueOf(finalUserId))&#13;
                ).build();&#13;
        // 5. 放行&#13;
        return chain.filter(swc);&#13;
    }&#13;
&#13;
    /**&#13;
     * 判断请求是否需要拦截&#13;
     * true 代表不需要拦截&#13;
     * false 代表拦截&#13;
     *&#13;
     * @param path 请求路径&#13;
     * @return&#13;
     */&#13;
    private boolean isExclude(String path) {&#13;
        System.out.println('path = ' + path);&#13;
        // 如果需要排除的请求集合为空，直接返回false&#13;
        if (CollUtil.isEmpty(authProperties.getExcludePaths())) return false;&#13;
&#13;
        for (String excludePath : authProperties.getExcludePaths()) {&#13;
            if (antPathMatcher.match(excludePath, path)) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    @Override&#13;
    public int getOrder() {&#13;
        return 0;&#13;
    }&#13;
}&#13;
````&#13;
&#13;
2. 抽取一个公共的模块这个这个模块被微服务引用，在这个微服务中定义一个拦截器，这个拦截器作用就是拦截网关转发的请求，获取请求中请求头中的用户信息，存储到线程对象中&#13;
````java&#13;
&#13;
public class UserInfoInterceptor implements HandlerInterceptor {&#13;
    /**&#13;
     * 到达请求资源之前&#13;
     * 需要做的事 ： 将用户信息存储到 ThreadLocal 中&#13;
     *&#13;
     * @param request&#13;
     * @param response&#13;
     * @param handler&#13;
     * @return&#13;
     * @throws Exception&#13;
     */&#13;
    @Override&#13;
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {&#13;
        // 1. 获取用户信息&#13;
        String userId = request.getHeader(CommonConstant.HEADER_USER_INFO);&#13;
&#13;
        // 2. 将用户信息存储到 ThreadLocal 中&#13;
        if (StrUtil.isNotBlank(userId)) {&#13;
            UserContext.setUser(Long.valueOf(userId));&#13;
        }&#13;
&#13;
        // 3. 放行&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * 完成请求后&#13;
     *&#13;
     * @param request  请求&#13;
     * @param response&#13;
     * @param handler&#13;
     * @param ex&#13;
     * @throws Exception 需要做的事清空请求头中用户数据&#13;
     *                   原因： 确保每一次请求处理的上下文隔离，保持系统的稳定性和安全性&#13;
     *                   如果不删除：当前服务被其他微服务调用导致线程池中的线程被复用，导致线程中存储了上一次请求的用户信息，请求数据是错误的&#13;
     */&#13;
    @Override&#13;
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {&#13;
        UserContext.removeUser();&#13;
    }&#13;
}&#13;
````&#13;
3. 在公共模块中配置这个拦截到 spring mvc 中&#13;
````java&#13;
@Configuration&#13;
// 在所有的 springMvc 工程中都存在 DispatcherServlet&#13;
// 只有 DispatcherServlet 类存在时，才会执行下面的配置&#13;
@ConditionalOnClass(DispatcherServlet.class)&#13;
public class WebConfig implements WebMvcConfigurer {&#13;
    /**&#13;
     * 添加拦截器&#13;
     * @param registry&#13;
     */&#13;
    @Override&#13;
    public void addInterceptors(InterceptorRegistry registry) {&#13;
        registry.addInterceptor(new UserInfoInterceptor());&#13;
    }&#13;
}&#13;
````&#13;
注意在这里定义的配置默认是对其他模块没有效果的  （默认的springboot 工程只会将启动类所在的包或者子包扫描到） ，需要利用 springboot 自动装 , 在 resources  创建一个  META-INF/spring.factories   实现自动装配&#13;
````factories &#13;
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&#13;
  com.hmall.common.config.MyBatisConfig,\&#13;
  com.hmall.common.config.WebConfig,\&#13;
  com.hmall.common.config.JsonConfig&#13;
````&#13;
&#13;
4. 微服务直接相互调用在 请求头中携带用户信息 &#13;
   - 1. 在 公共的api 模块中创建一个类实现 RequestInterceptor 接口&#13;
   - 2. apply方法中利用 RequestTemplate 将存储到线程对象中的用户信息设置给请求头&#13;
  ```java&#13;
  //  这里才有了匿名类来实现本质要一样的&#13;
    @Bean&#13;
    public RequestInterceptor userInfoRequestInterceptor() {&#13;
        return new RequestInterceptor() {&#13;
            @Override&#13;
            public void apply(RequestTemplate requestTemplate) {&#13;
                // 1. 从线程对象中获取用户信息&#13;
                Long userInfo = UserContext.getUser();&#13;
                // 2. 将用户信息设置到请求头中&#13;
                if (userInfo != null) {&#13;
                    requestTemplate.header(CommonConstant.HEADER_USER_INFO, userInfo.toString());&#13;
                }&#13;
            }&#13;
        };&#13;
    }&#13;
 ````&#13;
5. 在服务中就可以通过线程对象来获取当前的用户信息了&#13;
```java&#13;
    @Override&#13;
    public List&lt;CartVO&gt; queryMyCarts() {&#13;
        // 1.查询我的购物车列表&#13;
        List&lt;Cart&gt; carts = lambdaQuery().eq(Cart::getUserId, UserContext.getUser()).list();&#13;
        if (CollUtils.isEmpty(carts)) {&#13;
            return CollUtils.emptyList();&#13;
        }&#13;
&#13;
        // 2.转换VO&#13;
        List&lt;CartVO&gt; vos = BeanUtils.copyList(carts, CartVO.class);&#13;
&#13;
        // 3.处理VO中的商品信息&#13;
        handleCartItems(vos);&#13;
&#13;
        // 4.返回&#13;
        return vos;&#13;
    }&#13;
```&#13;
。</description><guid isPermaLink="true">https://2004GIF.github.io/chenzian-shrimp.github.io/post/wei-fu-wu---wang-guan-shi-xian-deng-lu-xiao-yan.html</guid><pubDate>Fri, 28 Jun 2024 04:24:18 +0000</pubDate></item><item><title>微服务</title><link>https://2004GIF.github.io/chenzian-shrimp.github.io/post/wei-fu-wu.html</link><description># 微服务&#13;
&#13;
## 微服务与单体架构&#13;
&#13;
微服务是一种软件架构风格，它是以专注于单一职责的很多小型项目为基础，组合出复杂的大型应用。</description><guid isPermaLink="true">https://2004GIF.github.io/chenzian-shrimp.github.io/post/wei-fu-wu.html</guid><pubDate>Thu, 27 Jun 2024 04:23:52 +0000</pubDate></item></channel></rss>