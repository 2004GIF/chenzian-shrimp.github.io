{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "title": "\u9648\u5b50\u5b89\u4e2a\u4eba\u535a\u5ba2", "subTitle": "\u6bcf\u65e5\u5206\u4eab", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/wei-fu-wu.html", "labels": ["documentation"], "postTitle": "\u5fae\u670d\u52a1", "postUrl": "post/wei-fu-wu.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/1", "commentNum": 0, "wordCount": 222, "description": "# \u5fae\u670d\u52a1\r\n\r\n## \u5fae\u670d\u52a1\u4e0e\u5355\u4f53\u67b6\u6784\r\n\r\n\u5fae\u670d\u52a1\u662f\u4e00\u79cd\u8f6f\u4ef6\u67b6\u6784\u98ce\u683c\uff0c\u5b83\u662f\u4ee5\u4e13\u6ce8\u4e8e\u5355\u4e00\u804c\u8d23\u7684\u5f88\u591a\u5c0f\u578b\u9879\u76ee\u4e3a\u57fa\u7840\uff0c\u7ec4\u5408\u51fa\u590d\u6742\u7684\u5927\u578b\u5e94\u7528\u3002", "top": 0, "createdAt": 1719462232, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-27", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/wei-fu-wu---wang-guan-shi-xian-deng-lu-xiao-yan.html", "labels": ["documentation"], "postTitle": "\u5fae\u670d\u52a1-\u7f51\u5173\u5b9e\u73b0\u767b\u5f55\u6821\u9a8c", "postUrl": "post/wei-fu-wu---wang-guan-shi-xian-deng-lu-xiao-yan.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/2", "commentNum": 0, "wordCount": 6016, "description": "# \u5fae\u670d\u52a1-\u7f51\u5173\r\n## \u5229\u7528\u5fae\u670d\u52a1\u7f51\u5173\u5b9e\u73b0\u767b\u5f55\u8ba4\u8bc1\r\n\u6d41\u7a0b\u56fe\r\n![wfw](https://github.com/2004GIF/chenzian-shrimp.github.io/assets/126451952/0df00b44-a517-4859-a8e9-844f302068c4)\r\n\r\n1. \u81ea\u5b9a\u4e49GlobalFilter\r\n````java\r\n/**\r\n * \u8ba4\u8bc1\u8fc7\u6ee4\u5668\r\n */\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class AuthGlobalFilter implements GlobalFilter, Ordered {\r\n\r\n    private final AuthProperties authProperties;\r\n\r\n    private final JwtTool jwtTool;\r\n    /**\r\n     * \u5229\u7528 spring \u63d0\u4f9b\u7684\u8def\u5f84\u5339\u914d\u5668\u6765\u6821\u9a8c\u8bf7\u6c42\u662f\u5426\u9700\u8981\u62e6\u622a\r\n     */\r\n    private final AntPathMatcher antPathMatcher = new AntPathMatcher();\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\r\n        // 1. \u83b7\u53d6\u8bf7\u6c42\u5bf9\u8c61\r\n        ServerHttpRequest request = exchange.getRequest();\r\n        // 2. \u5224\u65ad\u8bf7\u6c42\u7684\u8def\u5f84\u662f\u5426\u9700\u8981\u62e6\u622a\r\n        if (isExclude(request.getPath().toString())) {\r\n            // \u4e0d\u9700\u8981\u62e6\u622a\u653e\u884c\r\n            return chain.filter(exchange);\r\n        }\r\n        // 3. \u83b7\u53d6token \uff0c\u8fdb\u884c\u6821\u9a8c\r\n        HttpHeaders headers = request.getHeaders();\r\n        List<String> values = headers.get(HttpHeaders.AUTHORIZATION);\r\n        String token = null;\r\n        // 3.1 token \u4e0d\u4e3a\u7a7a\uff0c\u83b7\u53d6 token\r\n        if (values != null && CollUtil.isNotEmpty(values)) {\r\n            token = values.get(0);\r\n        }\r\n        Long userId = null;\r\n        // 3.2 \u6821\u9a8c token\r\n        try {\r\n            userId = jwtTool.parseToken(token);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            // token \u6821\u9a8c\u5931\u8d25\u62e6\u622a\r\n            ServerHttpResponse response = exchange.getResponse();\r\n            response.setStatusCode(HttpStatus.UNAUTHORIZED);\r\n           // response.setComplete() \u5c06\u8bf7\u6c42\u62e6\u622a\r\n            return response.setComplete();\r\n        }\r\n\r\n        //  4. \u5411\u4e0b\u6e38\u4f20\u9012\u7528\u6237\u6570\u636e (  \u5229\u7528\u8bf7\u6c42\u5934\u6765\u5411\u4e0b\u4f20\u9012\u7528\u6237\u4fe1\u606f )\r\n        Long finalUserId = userId;\r\n        // 4. \u6539\u53d8\u7f51\u5173\u4e2d\u4f20\u9012\u4e0b\u53bb\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61  mutate \u7a81\u53d8\r\n        ServerWebExchange swc = exchange.mutate()\r\n                .request(builder ->\r\n                        builder.header(CommonConstant.HEADER_USER_INFO, String.valueOf(finalUserId))\r\n                ).build();\r\n        // 5. \u653e\u884c\r\n        return chain.filter(swc);\r\n    }\r\n\r\n    /**\r\n     * \u5224\u65ad\u8bf7\u6c42\u662f\u5426\u9700\u8981\u62e6\u622a\r\n     * true \u4ee3\u8868\u4e0d\u9700\u8981\u62e6\u622a\r\n     * false \u4ee3\u8868\u62e6\u622a\r\n     *\r\n     * @param path \u8bf7\u6c42\u8def\u5f84\r\n     * @return\r\n     */\r\n    private boolean isExclude(String path) {\r\n        System.out.println('path = ' + path);\r\n        // \u5982\u679c\u9700\u8981\u6392\u9664\u7684\u8bf7\u6c42\u96c6\u5408\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56defalse\r\n        if (CollUtil.isEmpty(authProperties.getExcludePaths())) return false;\r\n\r\n        for (String excludePath : authProperties.getExcludePaths()) {\r\n            if (antPathMatcher.match(excludePath, path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return 0;\r\n    }\r\n}\r\n````\r\n\r\n2. \u62bd\u53d6\u4e00\u4e2a\u516c\u5171\u7684\u6a21\u5757\u8fd9\u4e2a\u8fd9\u4e2a\u6a21\u5757\u88ab\u5fae\u670d\u52a1\u5f15\u7528\uff0c\u5728\u8fd9\u4e2a\u5fae\u670d\u52a1\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u62e6\u622a\u5668\uff0c\u8fd9\u4e2a\u62e6\u622a\u5668\u4f5c\u7528\u5c31\u662f\u62e6\u622a\u7f51\u5173\u8f6c\u53d1\u7684\u8bf7\u6c42\uff0c\u83b7\u53d6\u8bf7\u6c42\u4e2d\u8bf7\u6c42\u5934\u4e2d\u7684\u7528\u6237\u4fe1\u606f\uff0c\u5b58\u50a8\u5230\u7ebf\u7a0b\u5bf9\u8c61\u4e2d\r\n````java\r\n\r\npublic class UserInfoInterceptor implements HandlerInterceptor {\r\n    /**\r\n     * \u5230\u8fbe\u8bf7\u6c42\u8d44\u6e90\u4e4b\u524d\r\n     * \u9700\u8981\u505a\u7684\u4e8b \uff1a \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u50a8\u5230 ThreadLocal \u4e2d\r\n     *\r\n     * @param request\r\n     * @param response\r\n     * @param handler\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n        // 1. \u83b7\u53d6\u7528\u6237\u4fe1\u606f\r\n        String userId = request.getHeader(CommonConstant.HEADER_USER_INFO);\r\n\r\n        // 2. \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u50a8\u5230 ThreadLocal \u4e2d\r\n        if (StrUtil.isNotBlank(userId)) {\r\n            UserContext.setUser(Long.valueOf(userId));\r\n        }\r\n\r\n        // 3. \u653e\u884c\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u5b8c\u6210\u8bf7\u6c42\u540e\r\n     *\r\n     * @param request  \u8bf7\u6c42\r\n     * @param response\r\n     * @param handler\r\n     * @param ex\r\n     * @throws Exception \u9700\u8981\u505a\u7684\u4e8b\u6e05\u7a7a\u8bf7\u6c42\u5934\u4e2d\u7528\u6237\u6570\u636e\r\n     *                   \u539f\u56e0\uff1a \u786e\u4fdd\u6bcf\u4e00\u6b21\u8bf7\u6c42\u5904\u7406\u7684\u4e0a\u4e0b\u6587\u9694\u79bb\uff0c\u4fdd\u6301\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u548c\u5b89\u5168\u6027\r\n     *                   \u5982\u679c\u4e0d\u5220\u9664\uff1a\u5f53\u524d\u670d\u52a1\u88ab\u5176\u4ed6\u5fae\u670d\u52a1\u8c03\u7528\u5bfc\u81f4\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u88ab\u590d\u7528\uff0c\u5bfc\u81f4\u7ebf\u7a0b\u4e2d\u5b58\u50a8\u4e86\u4e0a\u4e00\u6b21\u8bf7\u6c42\u7684\u7528\u6237\u4fe1\u606f\uff0c\u8bf7\u6c42\u6570\u636e\u662f\u9519\u8bef\u7684\r\n     */\r\n    @Override\r\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\r\n        UserContext.removeUser();\r\n    }\r\n}\r\n````\r\n3. \u5728\u516c\u5171\u6a21\u5757\u4e2d\u914d\u7f6e\u8fd9\u4e2a\u62e6\u622a\u5230 spring mvc \u4e2d\r\n````java\r\n@Configuration\r\n// \u5728\u6240\u6709\u7684 springMvc \u5de5\u7a0b\u4e2d\u90fd\u5b58\u5728 DispatcherServlet\r\n// \u53ea\u6709 DispatcherServlet \u7c7b\u5b58\u5728\u65f6\uff0c\u624d\u4f1a\u6267\u884c\u4e0b\u9762\u7684\u914d\u7f6e\r\n@ConditionalOnClass(DispatcherServlet.class)\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    /**\r\n     * \u6dfb\u52a0\u62e6\u622a\u5668\r\n     * @param registry\r\n     */\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new UserInfoInterceptor());\r\n    }\r\n}\r\n````\r\n\u6ce8\u610f\u5728\u8fd9\u91cc\u5b9a\u4e49\u7684\u914d\u7f6e\u9ed8\u8ba4\u662f\u5bf9\u5176\u4ed6\u6a21\u5757\u6ca1\u6709\u6548\u679c\u7684  \uff08\u9ed8\u8ba4\u7684springboot \u5de5\u7a0b\u53ea\u4f1a\u5c06\u542f\u52a8\u7c7b\u6240\u5728\u7684\u5305\u6216\u8005\u5b50\u5305\u626b\u63cf\u5230\uff09 \uff0c\u9700\u8981\u5229\u7528 springboot \u81ea\u52a8\u88c5 , \u5728 resources  \u521b\u5efa\u4e00\u4e2a  META-INF/spring.factories   \u5b9e\u73b0\u81ea\u52a8\u88c5\u914d\r\n````factories \r\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.hmall.common.config.MyBatisConfig,\\\r\n  com.hmall.common.config.WebConfig,\\\r\n  com.hmall.common.config.JsonConfig\r\n````\r\n\r\n4. \u5fae\u670d\u52a1\u76f4\u63a5\u76f8\u4e92\u8c03\u7528\u5728 \u8bf7\u6c42\u5934\u4e2d\u643a\u5e26\u7528\u6237\u4fe1\u606f \r\n   - 1. \u5728 \u516c\u5171\u7684api \u6a21\u5757\u4e2d\u521b\u5efa\u4e00\u4e2a\u7c7b\u5b9e\u73b0 RequestInterceptor \u63a5\u53e3\r\n   - 2. apply\u65b9\u6cd5\u4e2d\u5229\u7528 RequestTemplate \u5c06\u5b58\u50a8\u5230\u7ebf\u7a0b\u5bf9\u8c61\u4e2d\u7684\u7528\u6237\u4fe1\u606f\u8bbe\u7f6e\u7ed9\u8bf7\u6c42\u5934\r\n  ```java\r\n  //  \u8fd9\u91cc\u624d\u6709\u4e86\u533f\u540d\u7c7b\u6765\u5b9e\u73b0\u672c\u8d28\u8981\u4e00\u6837\u7684\r\n    @Bean\r\n    public RequestInterceptor userInfoRequestInterceptor() {\r\n        return new RequestInterceptor() {\r\n            @Override\r\n            public void apply(RequestTemplate requestTemplate) {\r\n                // 1. \u4ece\u7ebf\u7a0b\u5bf9\u8c61\u4e2d\u83b7\u53d6\u7528\u6237\u4fe1\u606f\r\n                Long userInfo = UserContext.getUser();\r\n                // 2. \u5c06\u7528\u6237\u4fe1\u606f\u8bbe\u7f6e\u5230\u8bf7\u6c42\u5934\u4e2d\r\n                if (userInfo != null) {\r\n                    requestTemplate.header(CommonConstant.HEADER_USER_INFO, userInfo.toString());\r\n                }\r\n            }\r\n        };\r\n    }\r\n ````\r\n5. \u5728\u670d\u52a1\u4e2d\u5c31\u53ef\u4ee5\u901a\u8fc7\u7ebf\u7a0b\u5bf9\u8c61\u6765\u83b7\u53d6\u5f53\u524d\u7684\u7528\u6237\u4fe1\u606f\u4e86\r\n```java\r\n    @Override\r\n    public List<CartVO> queryMyCarts() {\r\n        // 1.\u67e5\u8be2\u6211\u7684\u8d2d\u7269\u8f66\u5217\u8868\r\n        List<Cart> carts = lambdaQuery().eq(Cart::getUserId, UserContext.getUser()).list();\r\n        if (CollUtils.isEmpty(carts)) {\r\n            return CollUtils.emptyList();\r\n        }\r\n\r\n        // 2.\u8f6c\u6362VO\r\n        List<CartVO> vos = BeanUtils.copyList(carts, CartVO.class);\r\n\r\n        // 3.\u5904\u7406VO\u4e2d\u7684\u5546\u54c1\u4fe1\u606f\r\n        handleCartItems(vos);\r\n\r\n        // 4.\u8fd4\u56de\r\n        return vos;\r\n    }\r\n```\r\n\u3002", "top": 0, "createdAt": 1719548658, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-28", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "\u9648\u5b50\u5b89\u4e2a\u4eba\u535a\u5ba2", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "homeUrl": "https://2004GIF.github.io/chenzian-shrimp.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}