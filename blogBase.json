{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "title": "\u9648\u5b50\u5b89\u4e2a\u4eba\u535a\u5ba2", "subTitle": "\u6bcf\u65e5\u5206\u4eab", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/wei-fu-wu.html", "labels": ["documentation"], "postTitle": "\u5fae\u670d\u52a1", "postUrl": "post/wei-fu-wu.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/1", "commentNum": 0, "wordCount": 222, "description": "# \u5fae\u670d\u52a1\r\n\r\n## \u5fae\u670d\u52a1\u4e0e\u5355\u4f53\u67b6\u6784\r\n\r\n\u5fae\u670d\u52a1\u662f\u4e00\u79cd\u8f6f\u4ef6\u67b6\u6784\u98ce\u683c\uff0c\u5b83\u662f\u4ee5\u4e13\u6ce8\u4e8e\u5355\u4e00\u804c\u8d23\u7684\u5f88\u591a\u5c0f\u578b\u9879\u76ee\u4e3a\u57fa\u7840\uff0c\u7ec4\u5408\u51fa\u590d\u6742\u7684\u5927\u578b\u5e94\u7528\u3002", "top": 0, "createdAt": 1719462232, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-27", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/wei-fu-wu---wang-guan-shi-xian-deng-lu-xiao-yan.html", "labels": ["documentation"], "postTitle": "\u5fae\u670d\u52a1-\u7f51\u5173\u5b9e\u73b0\u767b\u5f55\u6821\u9a8c", "postUrl": "post/wei-fu-wu---wang-guan-shi-xian-deng-lu-xiao-yan.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/2", "commentNum": 0, "wordCount": 6016, "description": "# \u5fae\u670d\u52a1-\u7f51\u5173\r\n## \u5229\u7528\u5fae\u670d\u52a1\u7f51\u5173\u5b9e\u73b0\u767b\u5f55\u8ba4\u8bc1\r\n\u6d41\u7a0b\u56fe\r\n![wfw](https://github.com/2004GIF/chenzian-shrimp.github.io/assets/126451952/0df00b44-a517-4859-a8e9-844f302068c4)\r\n\r\n1. \u81ea\u5b9a\u4e49GlobalFilter\r\n````java\r\n/**\r\n * \u8ba4\u8bc1\u8fc7\u6ee4\u5668\r\n */\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class AuthGlobalFilter implements GlobalFilter, Ordered {\r\n\r\n    private final AuthProperties authProperties;\r\n\r\n    private final JwtTool jwtTool;\r\n    /**\r\n     * \u5229\u7528 spring \u63d0\u4f9b\u7684\u8def\u5f84\u5339\u914d\u5668\u6765\u6821\u9a8c\u8bf7\u6c42\u662f\u5426\u9700\u8981\u62e6\u622a\r\n     */\r\n    private final AntPathMatcher antPathMatcher = new AntPathMatcher();\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\r\n        // 1. \u83b7\u53d6\u8bf7\u6c42\u5bf9\u8c61\r\n        ServerHttpRequest request = exchange.getRequest();\r\n        // 2. \u5224\u65ad\u8bf7\u6c42\u7684\u8def\u5f84\u662f\u5426\u9700\u8981\u62e6\u622a\r\n        if (isExclude(request.getPath().toString())) {\r\n            // \u4e0d\u9700\u8981\u62e6\u622a\u653e\u884c\r\n            return chain.filter(exchange);\r\n        }\r\n        // 3. \u83b7\u53d6token \uff0c\u8fdb\u884c\u6821\u9a8c\r\n        HttpHeaders headers = request.getHeaders();\r\n        List<String> values = headers.get(HttpHeaders.AUTHORIZATION);\r\n        String token = null;\r\n        // 3.1 token \u4e0d\u4e3a\u7a7a\uff0c\u83b7\u53d6 token\r\n        if (values != null && CollUtil.isNotEmpty(values)) {\r\n            token = values.get(0);\r\n        }\r\n        Long userId = null;\r\n        // 3.2 \u6821\u9a8c token\r\n        try {\r\n            userId = jwtTool.parseToken(token);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            // token \u6821\u9a8c\u5931\u8d25\u62e6\u622a\r\n            ServerHttpResponse response = exchange.getResponse();\r\n            response.setStatusCode(HttpStatus.UNAUTHORIZED);\r\n           // response.setComplete() \u5c06\u8bf7\u6c42\u62e6\u622a\r\n            return response.setComplete();\r\n        }\r\n\r\n        //  4. \u5411\u4e0b\u6e38\u4f20\u9012\u7528\u6237\u6570\u636e (  \u5229\u7528\u8bf7\u6c42\u5934\u6765\u5411\u4e0b\u4f20\u9012\u7528\u6237\u4fe1\u606f )\r\n        Long finalUserId = userId;\r\n        // 4. \u6539\u53d8\u7f51\u5173\u4e2d\u4f20\u9012\u4e0b\u53bb\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61  mutate \u7a81\u53d8\r\n        ServerWebExchange swc = exchange.mutate()\r\n                .request(builder ->\r\n                        builder.header(CommonConstant.HEADER_USER_INFO, String.valueOf(finalUserId))\r\n                ).build();\r\n        // 5. \u653e\u884c\r\n        return chain.filter(swc);\r\n    }\r\n\r\n    /**\r\n     * \u5224\u65ad\u8bf7\u6c42\u662f\u5426\u9700\u8981\u62e6\u622a\r\n     * true \u4ee3\u8868\u4e0d\u9700\u8981\u62e6\u622a\r\n     * false \u4ee3\u8868\u62e6\u622a\r\n     *\r\n     * @param path \u8bf7\u6c42\u8def\u5f84\r\n     * @return\r\n     */\r\n    private boolean isExclude(String path) {\r\n        System.out.println('path = ' + path);\r\n        // \u5982\u679c\u9700\u8981\u6392\u9664\u7684\u8bf7\u6c42\u96c6\u5408\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56defalse\r\n        if (CollUtil.isEmpty(authProperties.getExcludePaths())) return false;\r\n\r\n        for (String excludePath : authProperties.getExcludePaths()) {\r\n            if (antPathMatcher.match(excludePath, path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return 0;\r\n    }\r\n}\r\n````\r\n\r\n2. \u62bd\u53d6\u4e00\u4e2a\u516c\u5171\u7684\u6a21\u5757\u8fd9\u4e2a\u8fd9\u4e2a\u6a21\u5757\u88ab\u5fae\u670d\u52a1\u5f15\u7528\uff0c\u5728\u8fd9\u4e2a\u5fae\u670d\u52a1\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u62e6\u622a\u5668\uff0c\u8fd9\u4e2a\u62e6\u622a\u5668\u4f5c\u7528\u5c31\u662f\u62e6\u622a\u7f51\u5173\u8f6c\u53d1\u7684\u8bf7\u6c42\uff0c\u83b7\u53d6\u8bf7\u6c42\u4e2d\u8bf7\u6c42\u5934\u4e2d\u7684\u7528\u6237\u4fe1\u606f\uff0c\u5b58\u50a8\u5230\u7ebf\u7a0b\u5bf9\u8c61\u4e2d\r\n````java\r\n\r\npublic class UserInfoInterceptor implements HandlerInterceptor {\r\n    /**\r\n     * \u5230\u8fbe\u8bf7\u6c42\u8d44\u6e90\u4e4b\u524d\r\n     * \u9700\u8981\u505a\u7684\u4e8b \uff1a \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u50a8\u5230 ThreadLocal \u4e2d\r\n     *\r\n     * @param request\r\n     * @param response\r\n     * @param handler\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n        // 1. \u83b7\u53d6\u7528\u6237\u4fe1\u606f\r\n        String userId = request.getHeader(CommonConstant.HEADER_USER_INFO);\r\n\r\n        // 2. \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u50a8\u5230 ThreadLocal \u4e2d\r\n        if (StrUtil.isNotBlank(userId)) {\r\n            UserContext.setUser(Long.valueOf(userId));\r\n        }\r\n\r\n        // 3. \u653e\u884c\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u5b8c\u6210\u8bf7\u6c42\u540e\r\n     *\r\n     * @param request  \u8bf7\u6c42\r\n     * @param response\r\n     * @param handler\r\n     * @param ex\r\n     * @throws Exception \u9700\u8981\u505a\u7684\u4e8b\u6e05\u7a7a\u8bf7\u6c42\u5934\u4e2d\u7528\u6237\u6570\u636e\r\n     *                   \u539f\u56e0\uff1a \u786e\u4fdd\u6bcf\u4e00\u6b21\u8bf7\u6c42\u5904\u7406\u7684\u4e0a\u4e0b\u6587\u9694\u79bb\uff0c\u4fdd\u6301\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u548c\u5b89\u5168\u6027\r\n     *                   \u5982\u679c\u4e0d\u5220\u9664\uff1a\u5f53\u524d\u670d\u52a1\u88ab\u5176\u4ed6\u5fae\u670d\u52a1\u8c03\u7528\u5bfc\u81f4\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u88ab\u590d\u7528\uff0c\u5bfc\u81f4\u7ebf\u7a0b\u4e2d\u5b58\u50a8\u4e86\u4e0a\u4e00\u6b21\u8bf7\u6c42\u7684\u7528\u6237\u4fe1\u606f\uff0c\u8bf7\u6c42\u6570\u636e\u662f\u9519\u8bef\u7684\r\n     */\r\n    @Override\r\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\r\n        UserContext.removeUser();\r\n    }\r\n}\r\n````\r\n3. \u5728\u516c\u5171\u6a21\u5757\u4e2d\u914d\u7f6e\u8fd9\u4e2a\u62e6\u622a\u5230 spring mvc \u4e2d\r\n````java\r\n@Configuration\r\n// \u5728\u6240\u6709\u7684 springMvc \u5de5\u7a0b\u4e2d\u90fd\u5b58\u5728 DispatcherServlet\r\n// \u53ea\u6709 DispatcherServlet \u7c7b\u5b58\u5728\u65f6\uff0c\u624d\u4f1a\u6267\u884c\u4e0b\u9762\u7684\u914d\u7f6e\r\n@ConditionalOnClass(DispatcherServlet.class)\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    /**\r\n     * \u6dfb\u52a0\u62e6\u622a\u5668\r\n     * @param registry\r\n     */\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new UserInfoInterceptor());\r\n    }\r\n}\r\n````\r\n\u6ce8\u610f\u5728\u8fd9\u91cc\u5b9a\u4e49\u7684\u914d\u7f6e\u9ed8\u8ba4\u662f\u5bf9\u5176\u4ed6\u6a21\u5757\u6ca1\u6709\u6548\u679c\u7684  \uff08\u9ed8\u8ba4\u7684springboot \u5de5\u7a0b\u53ea\u4f1a\u5c06\u542f\u52a8\u7c7b\u6240\u5728\u7684\u5305\u6216\u8005\u5b50\u5305\u626b\u63cf\u5230\uff09 \uff0c\u9700\u8981\u5229\u7528 springboot \u81ea\u52a8\u88c5 , \u5728 resources  \u521b\u5efa\u4e00\u4e2a  META-INF/spring.factories   \u5b9e\u73b0\u81ea\u52a8\u88c5\u914d\r\n````factories \r\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.hmall.common.config.MyBatisConfig,\\\r\n  com.hmall.common.config.WebConfig,\\\r\n  com.hmall.common.config.JsonConfig\r\n````\r\n\r\n4. \u5fae\u670d\u52a1\u76f4\u63a5\u76f8\u4e92\u8c03\u7528\u5728 \u8bf7\u6c42\u5934\u4e2d\u643a\u5e26\u7528\u6237\u4fe1\u606f \r\n   - 1. \u5728 \u516c\u5171\u7684api \u6a21\u5757\u4e2d\u521b\u5efa\u4e00\u4e2a\u7c7b\u5b9e\u73b0 RequestInterceptor \u63a5\u53e3\r\n   - 2. apply\u65b9\u6cd5\u4e2d\u5229\u7528 RequestTemplate \u5c06\u5b58\u50a8\u5230\u7ebf\u7a0b\u5bf9\u8c61\u4e2d\u7684\u7528\u6237\u4fe1\u606f\u8bbe\u7f6e\u7ed9\u8bf7\u6c42\u5934\r\n  ```java\r\n  //  \u8fd9\u91cc\u624d\u6709\u4e86\u533f\u540d\u7c7b\u6765\u5b9e\u73b0\u672c\u8d28\u8981\u4e00\u6837\u7684\r\n    @Bean\r\n    public RequestInterceptor userInfoRequestInterceptor() {\r\n        return new RequestInterceptor() {\r\n            @Override\r\n            public void apply(RequestTemplate requestTemplate) {\r\n                // 1. \u4ece\u7ebf\u7a0b\u5bf9\u8c61\u4e2d\u83b7\u53d6\u7528\u6237\u4fe1\u606f\r\n                Long userInfo = UserContext.getUser();\r\n                // 2. \u5c06\u7528\u6237\u4fe1\u606f\u8bbe\u7f6e\u5230\u8bf7\u6c42\u5934\u4e2d\r\n                if (userInfo != null) {\r\n                    requestTemplate.header(CommonConstant.HEADER_USER_INFO, userInfo.toString());\r\n                }\r\n            }\r\n        };\r\n    }\r\n ````\r\n5. \u5728\u670d\u52a1\u4e2d\u5c31\u53ef\u4ee5\u901a\u8fc7\u7ebf\u7a0b\u5bf9\u8c61\u6765\u83b7\u53d6\u5f53\u524d\u7684\u7528\u6237\u4fe1\u606f\u4e86\r\n```java\r\n    @Override\r\n    public List<CartVO> queryMyCarts() {\r\n        // 1.\u67e5\u8be2\u6211\u7684\u8d2d\u7269\u8f66\u5217\u8868\r\n        List<Cart> carts = lambdaQuery().eq(Cart::getUserId, UserContext.getUser()).list();\r\n        if (CollUtils.isEmpty(carts)) {\r\n            return CollUtils.emptyList();\r\n        }\r\n\r\n        // 2.\u8f6c\u6362VO\r\n        List<CartVO> vos = BeanUtils.copyList(carts, CartVO.class);\r\n\r\n        // 3.\u5904\u7406VO\u4e2d\u7684\u5546\u54c1\u4fe1\u606f\r\n        handleCartItems(vos);\r\n\r\n        // 4.\u8fd4\u56de\r\n        return vos;\r\n    }\r\n```\r\n\u3002", "top": 0, "createdAt": 1719548658, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-28", "dateLabelColor": "#bc4c00"}, "P3": {"htmlDir": "docs/post/wang-guan---dong-tai-lu-you.html", "labels": ["documentation"], "postTitle": "\u7f51\u5173-\u52a8\u6001\u8def\u7531", "postUrl": "post/wang-guan---dong-tai-lu-you.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/3", "commentNum": 0, "wordCount": 4507, "description": "# \u7f51\u5173-\u52a8\u6001\u8def\u7531\r\n\u5b9e\u73b0\u601d\u8def\uff1a\r\n1. \u76d1\u542cnacos\u914d\u7f6e\u6587\u4ef6\r\n2. \u66f4\u65b0\u7f51\u5173\u7684\u8def\u7531\u8868\r\n\r\n\r\n\u5b9e\u73b0\uff1a\r\n1. \u5bfc\u5165\u5750\u6807\r\n```xml\r\n   <!-- nacos -->\r\n        <dependency>\r\n            <groupId>com.alibaba.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\r\n        </dependency>\r\n\r\n        <!-- \u8bfb\u53d6 nacos \u4e2d\u5b9a\u4e49\u7684\u914d\u7f6e -->\r\n        <dependency>\r\n            <groupId>com.alibaba.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\r\n        </dependency>\r\n\r\n        <!--\r\n         \u4f7f\u7528 bootstrap \u914d\u7f6e\u6587\u4ef6\r\n         \u4e3b\u8981\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5f15\u5bfc\u9636\u6bb5\u914d\u7f6e\uff0c\u5728\u9879\u76ee\u542f\u52a8\u65f6\u5148\u52a0\u8f7d bootstrap\u914d\u7f6e\u6587\u4ef6\uff0c\u518d\u52a0\u8f7d application \u914d\u7f6e\u6587\u4ef6\r\n         -->\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n        </dependency>\r\n\r\n```\r\n2. \u521b\u5efabootstrap\u6587\u4ef6\u914d\u7f6e nacos \u7b49\u914d\u7f6e\u4fe1\u606f\r\n```yaml\r\nspring:\r\n  application: # \u670d\u52a1\u540d\u79f0\r\n    name: gateway\r\n  profiles:\r\n    active: dev\r\n  cloud:\r\n    # nacos \u914d\u7f6e\r\n    nacos:\r\n      server-addr: 192.168.42.135:8848\r\n\r\n```\r\n3. \u5199\u5b9e\u73b0\u4ee3\u7801\r\n````java\r\npackage com.hmall.gateway.router;\r\n\r\nimport cn.hutool.json.JSONUtil;\r\nimport com.alibaba.cloud.nacos.NacosConfigManager;\r\nimport com.alibaba.nacos.api.config.listener.Listener;\r\nimport com.alibaba.nacos.api.exception.NacosException;\r\nimport com.hmall.common.utils.CollUtils;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.cloud.gateway.route.RouteDefinition;\r\nimport org.springframework.cloud.gateway.route.RouteDefinitionWriter;\r\nimport org.springframework.stereotype.Component;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.util.concurrent.Executor;\r\n\r\n@Component\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class DynamicRouterConfig {\r\n    // nacos \u914d\u7f6e\u7ba1\u7406\u5668 \uff0c \u5728\u5e95\u5c42\u8fd9\u4e2a\u7c7b\u5df2\u7ecf\u6ce8\u518c\u6210\u4e86 Bean , \u800c\u8fd9\u7c7b\u7684 getConfigService\u65b9\u6cd5\u5c31\u53ef\u4ee5\u83b7\u53d6 ConfigService  \uff0cnacos \u7684\u8fde\u63a5\u5bf9\u8c61\r\n    private final NacosConfigManager nacosConfigManager;\r\n\r\n    //  \u64cd\u4f5c\u8def\u7531\u8868\u7684\u5bf9\u8c61 \uff0c\u65b0\u589e\u6216\u8005\u5220\u9664\u8def\u7531 \r\n    private final RouteDefinitionWriter routeDefinitionWriter;\r\n   // nacos \u4e2d\u914d\u7f6e\u6587\u4ef6\u7684\u540d\u5b57\r\n    private final String dataId = 'gateway-router.json';\r\n  // \u7ec4\u540d\r\n    private final String group = 'DEFAULT_GROUP';\r\n  // \u4fdd\u5b58\u6bcf\u4e00\u6b21\u66f4\u65b0\u540e\u7684\u8def\u7531 id \r\n    private final Set<String> routerIds = new HashSet<>();\r\n\r\n    @PostConstruct // \u5728\u6784\u9020\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u7acb\u523b\u6267\u884c\r\n    public void initRouter() throws NacosException {\r\n        // \u7b2c\u4e00\u6b21\u83b7\u53d6\u7684\u5230\u7684\u8def\u7531\u914d\u7f6e\u4fe1\u606f\r\n        String configInfo = nacosConfigManager.getConfigService()\r\n       // \u5148\u62c9\u53d6\u4e00\u6b21\u914d\u7f6e\uff0c\u540e\u518d\u76d1\u542c\u914d\u7f6e \u53c2\u6570\uff1a \u914d\u7f6e\u6587\u4ef6\u540d\u3001\u7ec4\u522b\u3001\u8d85\u65f6\u65f6\u95f4 \u3001\u76d1\u542c\u5668\r\n       .getConfigAndSignListener(\r\n                dataId, group, 5000,\r\n                new Listener() {\r\n                    /**\r\n                     * \u5229\u7528\u7ebf\u7a0b\u6c60\u6280\u672f\u6765\u8fdb\u884c\u4e0b\u9762\u7684 receiveConfigInfo \u65b9\u6cd5\r\n                     * @return\r\n                     */\r\n                    @Override\r\n                    public Executor getExecutor() {\r\n                        return null;\r\n                    }\r\n\r\n                    /**\r\n                     * \u76d1\u542c\u5230\u8def\u7531\u53d8\u5316\u6267\u884c\u7684\u51fd\u6570\r\n                     * @param configInfo \u914d\u7f6e\u4fe1\u606f\r\n                     */\r\n                    @Override\r\n                    public void receiveConfigInfo(String configInfo) {\r\n                        // \u52a8\u6001\u52a0\u8f7d\u8def\u7531\r\n                        updateRouter(configInfo);\r\n                    }\r\n                });\r\n        //  \u5148\u66f4\u65b0\u4e00\u6b21\u8def\u7531\u8868\uff0c\u540e\u9762\u901a\u8fc7\u76d1\u542c\u5668\u6765\u66f4\u65b0\u8def\u7531\u8868\r\n        updateRouter(configInfo);\r\n\r\n    }\r\n\r\n    /**\r\n     * \u66f4\u65b0\u8def\u7531\u8868\r\n     *\r\n     * @param configInfo \uff0c \u8def\u7531\u7684\u914d\u7f6e\u4fe1\u606f\r\n     */\r\n    public void updateRouter(String configInfo) {\r\n        log.info('\u8def\u7531\u914d\u7f6e\u4fe1\u606f\uff1a {}', configInfo);\r\n        // \u83b7\u53d6\u5230\u7684 configInfo \u662f\u4e00\u4e2a json \u683c\u5f0f\u7684\u6570\u7ec4\u5bf9\u8c61\uff0c\u5bf9\u8c61\u7684\u5c5e\u6027\u662f id\u3001route\u3001predicates\u3001filters \uff0c\r\n        // \u6b63\u597d RouteDefinition \u7c7b\u5c31\u662f\u8fd9\u4e48\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u6210 RouteDefinition \u5bf9\u8c61\r\n        // 1. \u5c06\u8def\u7531\u4fe1\u606f\u8f6c\u6362\u4e3a RouteDefinition \u5bf9\u8c61\u96c6\u5408\r\n        List<RouteDefinition> routeDefinitionList = JSONUtil.toList(configInfo, RouteDefinition.class);\r\n\r\n        // 2. \u5728\u66f4\u65b0\u8def\u7531\u8868\u4e4b\u524d\u5e94\u8be5\u5c06\u65e7\u7684\u8def\u7531\u8868\u7684\u6240\u6709\u8def\u7531\u5220\u9664\u6389\r\n        for (String routerId : routerIds) {\r\n            routeDefinitionWriter.delete(Mono.just(routerId)).subscribe();\r\n        }\r\n        // 2.1 \u6e05\u7a7a\u5df2\u7ecf\u5220\u9664\u7684\u8def\u7531id \uff0c\u9632\u6b62\u53bb\u5220\u9664\u4e0a\u4e00\u6b21\u66f4\u65b0\u7684\u8def\u7531\r\n        routerIds.clear();\r\n\r\n        // 3. \u5c06\u8def\u7531\u4fe1\u606f\u66f4\u65b0\u5230 Gateway\r\n        if (CollUtils.isEmpty(routeDefinitionList)) return;\r\n\r\n        for (RouteDefinition routeDefinition : routeDefinitionList) {\r\n            // \u66f4\u65b0\u8def\u7531\u8868\uff0c\u5e76\u4e14\u8ba2\u9605\r\n            routeDefinitionWriter.save(Mono.just(routeDefinition)).subscribe();\r\n            // \u8bb0\u5f55\u66f4\u65b0\u7684\u8def\u7531 id \uff0c\u4ee5\u4fbf\u4e0b\u4e00\u6b21\u66f4\u65b0\u8def\u7531\u662f\u5c06\u65e7\u7684\u8def\u7531\u5220\u9664\r\n            routerIds.add(routeDefinition.getId());\r\n        }\r\n    }\r\n\r\n}\r\n\r\n````\r\n\u3002", "top": 0, "createdAt": 1719574634, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-28", "dateLabelColor": "#bc4c00"}, "P4": {"htmlDir": "docs/post/wei-fu-wu-bao-hu- \u2014\u2014 Sentinel.html", "labels": ["documentation"], "postTitle": "\u5fae\u670d\u52a1\u4fdd\u62a4 \u2014\u2014 Sentinel", "postUrl": "post/wei-fu-wu-bao-hu-%20%E2%80%94%E2%80%94%20Sentinel.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/4", "commentNum": 0, "wordCount": 1309, "description": "# \u5fae\u670d\u52a1\u4fdd\u62a4 \u2014\u2014 Sentinel\r\n## \u9650\u6d41\uff08\u5fae\u670d\u52a1\u63d0\u4f9b\u8005\uff09\r\n\u4f5c\u7528\uff1a\u63a7\u5236\u8bbf\u95ee\u5fae\u670d\u52a1\u7684 QPS \u6570\u91cf\r\n\u5b9e\u73b0\u65b9\u5f0f\u76f4\u63a5\u5728 sentinel \u63a7\u5236\u53f0\u4e2d\u7ed9\u5bf9\u5e94\u7684\u7c07\u70b9\u6dfb\u52a0\u6d41\u63a7\u89c4\u5219\u8bbe\u7f6e QPS \u5373\u53ef\r\n\r\n## \u7ebf\u7a0b\u9694\u79bb\uff08Thread Isolation\uff09\r\n   - **\u5b9a\u4e49**\uff1a\u7ebf\u7a0b\u9694\u79bb\u5728Sentinel\u4e2d\u901a\u5e38\u662f\u901a\u8fc7\u5e76\u53d1\u7ebf\u7a0b\u6570\u63a7\u5236\u5b9e\u73b0\u7684\u3002", "top": 0, "createdAt": 1719629490, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-29", "dateLabelColor": "#bc4c00"}, "P5": {"htmlDir": "docs/post/fen-bu-shi-shi-wu-kuang-jia-\u2014\u2014 setata.html", "labels": ["documentation"], "postTitle": "\u5206\u5e03\u5f0f\u4e8b\u52a1\u6846\u67b6\u2014\u2014 setata", "postUrl": "post/fen-bu-shi-shi-wu-kuang-jia-%E2%80%94%E2%80%94%20setata.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/5", "commentNum": 0, "wordCount": 6786, "description": "# \u5206\u5e03\u5f0f\u4e8b\u52a1\u6846\u67b6\u2014\u2014 setata\r\n  \u4e1a\u52a1\u573a\u666f\uff1a \r\n\r\n![image-20240629182546354](https://github.com/2004GIF/chenzian-shrimp.github.io/assets/126451952/8790679a-6ba1-45c3-882c-fd84121a1f40)\r\n\u4ee3\u7801\u5b9e\u73b0\uff1a\r\n\r\n````java\r\n   @Override\r\n    @GlobalTransactional // \u5f00\u542f\u5168\u5c40\u4e8b\u52a1\u7ba1\u7406\u5668\r\n    public Long createOrder(OrderFormDTO orderFormDTO) {\r\n        // 1.\u8ba2\u5355\u6570\u636e\r\n        Order order = new Order();\r\n        // 1.1.\u67e5\u8be2\u5546\u54c1\r\n        List<OrderDetailDTO> detailDTOS = orderFormDTO.getDetails();\r\n        // 1.2.\u83b7\u53d6\u5546\u54c1id\u548c\u6570\u91cf\u7684Map\r\n        Map<Long, Integer> itemNumMap = detailDTOS.stream()\r\n                .collect(Collectors.toMap(OrderDetailDTO::getItemId, OrderDetailDTO::getNum));\r\n        Set<Long> itemIds = itemNumMap.keySet();\r\n        // 1.3.\u67e5\u8be2\u5546\u54c1\r\n        List<ItemDTO> items = itemClient.queryItemsByIds(itemIds);\r\n\r\n        if (items == null || items.size() < itemIds.size()) {\r\n            throw new BadRequestException('\u5546\u54c1\u4e0d\u5b58\u5728');\r\n        }\r\n        // 1.4.\u57fa\u4e8e\u5546\u54c1\u4ef7\u683c\u3001\u8d2d\u4e70\u6570\u91cf\u8ba1\u7b97\u5546\u54c1\u603b\u4ef7\uff1atotalFee\r\n        int total = 0;\r\n        for (ItemDTO item : items) {\r\n            total += item.getPrice() * itemNumMap.get(item.getId());\r\n        }\r\n        order.setTotalFee(total);\r\n        // 1.5.\u5176\u5b83\u5c5e\u6027\r\n        order.setPaymentType(orderFormDTO.getPaymentType());\r\n        order.setUserId(UserContext.getUser()); //   \u767b\u5f55\u7528\u6237id\r\n        order.setStatus(1);\r\n        // 1.6.\u5c06Order\u5199\u5165\u6570\u636e\u5e93order\u8868\u4e2d\r\n        save(order);\r\n\r\n        // 2.\u4fdd\u5b58\u8ba2\u5355\u8be6\u60c5\r\n        List<OrderDetail> details = buildDetails(order.getId(), items, itemNumMap);\r\n        detailService.saveBatch(details);\r\n\r\n        // 3.\u6e05\u7406\u8d2d\u7269\u8f66\u5546\u54c1\r\n        cartClient.deleteCartItemByIds(itemIds);\r\n\r\n        // 4.\u6263\u51cf\u5e93\u5b58\r\n        try {\r\n            itemClient.deductStock(detailDTOS);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException('\u5e93\u5b58\u4e0d\u8db3\uff01');\r\n        }\r\n        return order.getId();\r\n    }\r\n````\r\n\r\n\u51fa\u73b0\u95ee\u9898\uff1a\u6e05\u7a7a\u8d2d\u7269\u8f66\u7684\u4e1a\u52a1\u5b8c\u6210\uff0cSQL \u8bed\u53e5\u6267\u884c\u5b8c\u6210\u5df2\u7ecf\u63d0\u4ea4\u4e86\uff0c\u5230\u4e86\u6263\u51cf\u5546\u54c1\u5e93\u5b58\u7684\u4e1a\u52a1\u51fa\u9519\u4e86\uff0c\u5e94\u8be5\u6574\u4e2a\u521b\u5efa\u8ba2\u5355\u7684\u4e1a\u52a1\u90fd\u5931\u8d25\u4e86\uff0c\u5931\u8d25\u5c31\u5e94\u8be5\u56de\u6eda\u6062\u590d\u539f\u6765\u7684\u6570\u636e\uff0c\u4f46\u662f\u6e05\u7a7a\u8d2d\u7269\u8f66\u7684\u4e1a\u52a1\u7684SQL\u8bed\u53e5\u5df2\u7ecf\u63d0\u4ea4\u4e0d\u53ef\u80fd\u56de\u6eda\u4e86\u3002", "top": 0, "createdAt": 1719658277, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-29", "dateLabelColor": "#bc4c00"}, "P6": {"htmlDir": "docs/post/fu-wu-bao-hu-he-fen-bu-shi-shi-wu.html", "labels": ["documentation"], "postTitle": "\u670d\u52a1\u4fdd\u62a4\u548c\u5206\u5e03\u5f0f\u4e8b\u52a1", "postUrl": "post/fu-wu-bao-hu-he-fen-bu-shi-shi-wu.html", "postSourceUrl": "https://github.com/2004GIF/chenzian-shrimp.github.io/issues/6", "commentNum": 0, "wordCount": 2031, "description": "# \u670d\u52a1\u4fdd\u62a4\r\n\u5b9e\u73b0\u6b65\u9aa4\uff1a\r\n1. \u627e\u51fa\u9700\u8981\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u7684\u4e1a\u52a1\r\n\r\n2. \u5728\u8fd9\u4e2a\u5fae\u670d\u52a1\u6dfb\u52a0 sentinel \u7684\u5750\u6807\u548c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u4e0a sentinel\u7684\u63a7\u5236\u5730\u5740\r\n\r\n   ````xml\r\n    <!-- sentinel \u670d\u52a1\u4fdd\u62a4 -->\r\n    <dependency>\r\n        <groupId>com.alibaba.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\r\n    </dependency>\r\n   ````\r\n\r\n   ```yaml\r\n   spring:\r\n     cloud:\r\n       sentinel: # \u8fde\u63a5 sentinel \u63a7\u5236\u53f0\r\n         transport:\r\n           dashboard: 127.0.0.1:8090 # sentinel \u63a7\u5236\u53f0\u5730\u5740\r\n         http-method-specify: true   # \u5c06http\u7684\u8bf7\u6c42\u65b9\u6cd5\u4f5c\u4e3asentinel\u7684\u8d44\u6e90\u540d\u79f0\u7684\u4e00\u90e8\u5206 \uff08  \uff09\r\n   # \u8bbe\u7f6e feign \u5728\u5e95\u5c42\u4f7f\u7528 okhttp \u5e76\u4e14\u4f7f\u7528 okhttp \u7684\u8fde\u63a5\u6c60\r\n   feign:\r\n     okhttp:\r\n       enabled: true\r\n     sentinel:\r\n       enabled: true\r\n   ```\r\n\r\n3.  \u7ed9 client \u63a5\u53e3\u6dfb\u52a0  FallBack   \r\n\r\n   1. \u521b\u5efa\u7c7b\u5b9e\u73b0 FallbackFactory<CartClient>\r\n\r\n      ```java\r\n      @Slf4j\r\n      public class CartClientFallBack implements FallbackFactory<CartClient> {\r\n          @Override\r\n          public CartClient create(Throwable cause) {\r\n              return ids -> {\r\n                  log.error('\u6279\u91cf\u5220\u9664\u8d2d\u7269\u8f66\u6570\u636e --- \u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\uff0c\u539f\u56e0\uff1a{}', cause.getMessage());\r\n                  throw new RuntimeException(StrUtil.format('\u6279\u91cf\u5220\u9664\u8d2d\u7269\u8f66\u6570\u636e \uff1a{}', cause.getMessage()));\r\n              };\r\n          }\r\n      }\r\n      ```\r\n\r\n   2. \u6dfb\u52a0\u5230 IOC \u5bb9\u5668\u4e2d\r\n\r\n      ```java\r\n         @Bean\r\n          public CartClientFallBack cartClientFallBack() {\r\n              return new CartClientFallBack();\r\n          }\r\n      ```\r\n\r\n   3. \u5728 client \u6dfb\u52a0 FallBack \r\n\r\n      ```java\r\n      @FeignClient(value = 'cart-service' , fallbackFactory = CartClientFallBack.class)\r\n      public interface CartClient {\r\n          /**\r\n           * \u6279\u91cf\u5220\u9664\u8d2d\u7269\u8f66\u6570\u636e\r\n           * @param ids\r\n           */\r\n          @DeleteMapping('/carts')\r\n          void deleteCartItemByIds(@RequestParam('ids') Collection<Long> ids);\r\n      }\r\n      ```\r\n\r\n4. \u5728\u63a7\u5236\u53f0\u4e2d\u6dfb\u52a0\u4fdd\u62a4\u89c4\u5219  \uff08sentinel \uff09\r\n\r\n\r\n\r\n# \u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\r\n\u5b9e\u73b0\u6b65\u9aa4\uff1a\r\n\r\n1. \u7ed9\u6bcf\u4e00\u4e2a\u52a0\u5165\u4e1a\u52a1\u7684\u5fae\u670d\u52a1\u6dfb\u52a0 seata \u4f9d\u8d56\u548c\u5bf9\u5e94\u7684seata\u914d\u7f6e \uff08  \u5728nacos \u4e2d\u53ef\u4ee5\u76f4\u63a5\u5728 bootstrap \u6587\u4ef6\u5f15\u5165\uff09\r\n2. \u3010\u5982\u679c seata \u9009\u62e9\u7684\u6a21\u5f0f\u662f AT \uff0c\u5c31\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u53c2\u52a0\u4e1a\u52a1\u7684\u5fae\u670d\u52a1\u6dfb\u52a0\u4e00\u4e2a undo_log \uff08\u5feb\u7167\u8868\u7528\u4e8e\u6062\u590d\u6570\u636e\uff09\u3011\r\n3. \u7ed9\u4e1a\u52a1\u5165\u53e3\u52a0\u4e0a @GlobalTransactional \u6ce8\u89e3\r\n4. \u7ed9\u5176\u4ed6\u88ab\u8c03\u7528\u7684\u4e1a\u52a1\u52a0\u4e0a @Transactional \u6ce8\u89e3\uff08\u660e\u786e\u8be5\u4e1a\u52a1\u53ef\u80fd\u4f1a\u6eda\u56de\uff09\u3002", "top": 0, "createdAt": 1719671288, "style": "", "script": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-06-29", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "\u9648\u5b50\u5b89\u4e2a\u4eba\u535a\u5ba2", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "homeUrl": "https://2004GIF.github.io/chenzian-shrimp.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}